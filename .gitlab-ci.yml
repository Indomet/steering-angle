# Which Docker image shall be used on the GitLab runner?
image: docker:latest

# Details about how to connect to the Docker service to run this build.
# variables:
#   DOCKER_HOST: tcp://docker:2375
#   DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

stages:
  - build
  - test
  - deploy

# Display information before we start the build.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - apt-get -qq update && apt-get -qq install -y lcov
  - apt update && apt -y install make autoconf gcc g++

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: test
  script:
    - docker build -f src/Dockerfile .
    # Compile your C++ code with coverage flags
    - g++ -fprofile-arcs -ftest-coverage -o test_executable src/TestPrimeChecker.cpp
    # Run your tests
    - ./test_executable
    # Generate code coverage report using lcov
    - lcov --capture --directory . --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info # Exclude system headers
    - lcov --list coverage.info # Optional: print coverage summary to console
  artifacts:
    paths:
      - coverage.info # Publish coverage report as an artifact

# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  script:
    - docker build -f src/Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
  only:
    - /^v\d+\.\d+\.\d+$/
