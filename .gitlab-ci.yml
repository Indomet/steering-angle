# Which Docker image shall be used on the GitLab runner?
image: docker:latest

# Details about how to connect to the Docker service to run this build.
# variables:
#   DOCKER_HOST: tcp://docker:2375
#   DOCKER_TLS_CERTDIR: ""

services:
  - docker:dind

stages:
  - build
  - deploy

# Display information before we start the build.
before_script:
  - docker info
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  script:
    - docker build -f src/Dockerfile .
    
code-cover:
  tags:
    - docker
  image: ubuntu:latest
  stage: build
  before_script: 
    - apt update && apt -y install make autoconf gcc g++
    - apt-get update
    - apt-get -y upgrade 
    - DEBIAN_FRONTEND=noninteractive apt-get -y install build-essential cmake gcovr
    
    

  script:
    #- apk add cmake make g++ gcovr
    - cd src
    - mkdir build
    - cd build
    - cmake ..
    - make
    - make test
    - cd ..
    - mkdir public
    - gcovr --xml-pretty --exclude-unreachable-branches --print-summary --html-details public/report.html -o public/coverage.xml --root ${CI_PROJECT_DIR}/src
    - gcovr --txt --exclude catch.hpp
  #https://docs.gitlab.com/ee/ci/testing/test_coverage_visualization.html
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    paths:
      - src/public
    reports:
      coverage_report:
        coverage_format: cobertura
        path: src/public/coverage.xml
        
  
# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  script:
    - docker build -f src/Dockerfile -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" .
    - docker push "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG"
  only:
    - /^v\d+\.\d+\.\d+$/